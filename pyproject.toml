[tool.poetry]
name = "magnit-test"
version = "0.1.0"
description = ""
authors = ["artsmolin <artursmolin@outlook.com>"]

[tool.poetry.dependencies]
python = "^3.9"
aiohttp = "^3.7.4"
pydantic = "^1.8"
pytest-cov = "^2.11.1"
loguru = "^0.5.3"

[tool.poetry.dev-dependencies]
pytest = "^5.2"
coverage = "^5.4"
black = "^20.8b1"
mypy = "^0.812"
isort = "^5.7.0"
pylint = "^2.7.1"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.isort]
src_paths = ["magnit_test"]
multi_line_output = 3
force_single_line = true

[tool.pylint.MASTER]
persistent = "yes"
jobs = 4
unsafe-load-any-extension = "no"
extension-pkg-whitelist = [
    "pydantic",
]

[tool.pylint.'MESSAGES CONTROL']
enable = [
    "use-symbolic-message-instead",
    "useless-supression",
    "fixme",
]
disable = [
    "missing-docstring",
    "protected-access",
    "too-few-public-methods",
    "arguments-differ",
    "logging-format-interpolation",
    "duplicate-code",
    "fixme",
    "global-statement",
    "multiple-statements",
]

[tool.pylint.REPORTS]
output-format = "text"
reports = "no"

[tool.pylint.LOGGING]
logging-modules = "logging"

[tool.pylint.MISCELLANEOUS]
notes = [
    "FIXME",
    "XXX",
    "TODO",
]

[tool.pylint.SIMILARITIES]
min-similarity-lines = 4
ignore-comments = "yes"
ignore-docstrings = "yes"
ignore-imports = "no"

[tool.pylint.VARIABLES]
init-import = "no"
dummy-variables-rgx = "_$|dummy"
callbacks=["cb_", "_cb"]

[tool.pylint.FORMAT]
max-line-length = 120
ignore-long-lines = "^\\s*(# )?<?https?://\\S+>?$"
single-line-if-stmt = "no"
no-space-check = [
    "trailing-comma",
    "dict-separator",
]
max-module-lines = 2000
indent-string="    "
indent-after-paren = 4

[tool.pylint.BASIC]
bad-functions=["map", "filter", "input"]
good-names=["i", "j", "k", "_", "f", "e", "pytestmark", "db"]
bad-names=["foo", "bar", "baz", "toto", "tutu", "tata"]
include-naming-hint = "no"
function-rgx = "[a-z_][a-z0-9_]{1,30}$"
function-name-hint = "[a-z_][a-z0-9_]{1,30}$"
variable-rgx = "[a-z_][a-z0-9_]{1,30}$"
variable-name-hint = "[a-z_][a-z0-9_]{1,30}$"
const-rgx = "(([A-Z_][A-Z0-9_]*)|(__.*__))$"
const-name-hint = "(([A-Z_][A-Z0-9_]*)|(__.*__))$"
attr-rgx = "[a-z_][a-z0-9_]{2,}$"
attr-name-hint = "[a-z_][a-z0-9_]{2,}$"
argument-rgx = "[a-z_][a-z0-9_]{1,30}$"
argument-name-hint = "[a-z_][a-z0-9_]{1,30}$"
class-attribute-rgx = "([A-Za-z_][A-Za-z0-9_]{2,30}|(__.*__))$"
class-attribute-name-hint = "([A-Za-z_][A-Za-z0-9_]{2,30}|(__.*__))$"
inlinevar-rgx = "[A-Za-z_][A-Za-z0-9_]*$"
inlinevar-name-hint = "[A-Za-z_][A-Za-z0-9_]*$"
class-rgx = "[A-Z_][a-zA-Z0-9]+$"
class-name-hint = "[A-Z_][a-zA-Z0-9]+$"
module-rgx = "(([a-z_][a-z0-9_]*)|([A-Z][a-zA-Z0-9]+))$"
module-name-hint = "(([a-z_][a-z0-9_]*)|([A-Z][a-zA-Z0-9]+))$"
method-rgx = "[a-z_][a-z0-9_]{2,}$"
method-name-hint = "[a-z_][a-z0-9_]{2,}$"
no-docstring-rgx = "__.*__"
docstring-min-length = -1
property-classes = ["abc.abstractproperty"]

[tool.pylint.TYPECHECK]
ignore-mixin-members = "yes"
ignored-classes = ["SQLObject", "optparse.Values", "thread._local", "_thread._local"]
generated-members = ["REQUEST", "acl_users", "aq_parent"]
contextmanager-decorators = ["contextlib.contextmanager"]

[tool.pylint.SPELLING]
spelling-store-unknown-words = "no"

[tool.pylint.DESIGN]
max-args = 10
ignored-argument-names = "_.*"
max-locals = 25
max-returns = 11
max-branches = 26
max-statements = 100
max-parents = 7
max-attributes = 11
min-public-methods = 2
max-public-methods =25

[tool.pylint.CLASSES]
defining-attr-methods=["__init__", "__new__", "setUp", "__post_init__"]
valid-classmethod-first-arg = "cls"
valid-metaclass-classmethod-first-arg = "mcs"
exclude-protected = ["_asdict", "_fields", "_replace", "_source", "_make"]

[tool.pylint.IMPORTS]
deprecated-modules = ["regsub", "TERMIOS", "Bastion", "rexec"]

[tool.pylint.EXCEPTIONS]
overgeneral-exceptions = ["Exception"]
